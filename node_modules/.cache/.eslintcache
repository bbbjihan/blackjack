[{"D:\\Projects\\blackjack\\src\\index.js":"1","D:\\Projects\\blackjack\\src\\App.js":"2","D:\\Projects\\blackjack\\src\\BlackJack.js":"3","D:\\Projects\\blackjack\\src\\components\\Choose\\index.js":"4","D:\\Projects\\blackjack\\src\\components\\Status\\index.js":"5","D:\\Projects\\blackjack\\src\\components\\GameOver\\index.js":"6","D:\\Projects\\blackjack\\src\\components\\Table\\index.js":"7","D:\\Projects\\blackjack\\src\\components\\Inform\\index.js":"8","D:\\Projects\\blackjack\\src\\Atom.js":"9","D:\\Projects\\blackjack\\src\\components\\Title\\index.js":"10"},{"size":340,"mtime":1680024696681,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1680199798097,"results":"13","hashOfConfig":"12"},{"size":507,"mtime":1680199865522,"results":"14","hashOfConfig":"12"},{"size":12389,"mtime":1680199495606,"results":"15","hashOfConfig":"12"},{"size":858,"mtime":1680197512686,"results":"16","hashOfConfig":"12"},{"size":1664,"mtime":1680079936373,"results":"17","hashOfConfig":"12"},{"size":4006,"mtime":1680354179749,"results":"18","hashOfConfig":"12"},{"size":725,"mtime":1680079936412,"results":"19","hashOfConfig":"12"},{"size":896,"mtime":1680199293589,"results":"20","hashOfConfig":"12"},{"size":363,"mtime":1680200073001,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1jcalf5",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\blackjack\\src\\index.js",[],[],[],"D:\\Projects\\blackjack\\src\\App.js",[],[],"D:\\Projects\\blackjack\\src\\BlackJack.js",[],[],"D:\\Projects\\blackjack\\src\\components\\Choose\\index.js",["55"],[],"import { useEffect, useState } from 'react';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport '../../Atom';\r\nimport { betState, DeckState, DhandState, DscoreState, GameOverState, informState, moneyState, PhandState, phaseState, PscoreState } from '../../Atom';\r\nimport './Choose.css';\r\n\r\nconst Choose = () => {\r\n    const setInform = useSetRecoilState(informState);\r\n    const setGameOver = useSetRecoilState(GameOverState);\r\n    const [betting, setBetting] = useState(10);\r\n    const [bet, setBet] = useRecoilState(betState);\r\n    const [money, setMoney] = useRecoilState(moneyState);\r\n    const [phase, setPhase] = useRecoilState(phaseState);\r\n    const [Deck, setDeck] = useRecoilState(DeckState);\r\n    const [Phand, setPhand] = useRecoilState(PhandState);\r\n    const [Dhand, setDhand] = useRecoilState(DhandState);\r\n    const [Pscore, setPscore] = useRecoilState(PscoreState);\r\n    const [Dscore, setDscore] = useRecoilState(DscoreState);\r\n\r\n    const wait = (Sec) => new Promise((resolve) => setTimeout(resolve, Sec * 1000));\r\n\r\n    const BET = () => {\r\n        setPhand([]);\r\n        setDhand([]);\r\n        setPscore([0]);\r\n        setDscore([0]);\r\n        setBet(betting);\r\n        setMoney(money - betting);\r\n        setBetting(10);\r\n        setPhase(2);\r\n        setController(\"DrawPhase\");\r\n    }\r\n\r\n    const cardShuffle = () => {\r\n        console.log(\"cardShuffle\");\r\n        setPhase(2);\r\n        setInform(\"Shuffling...\");\r\n        let shuffling = [[\"A\",\"spade\"],[2,\"spade\"],[3,\"spade\"],[4,\"spade\"],[5,\"spade\"],[6,\"spade\"],[7,\"spade\"],[8,\"spade\"],[9,\"spade\"],[10,\"spade\"],[\"J\",\"spade\"],[\"Q\",\"spade\"],[\"K\",\"spade\"],[\"A\",\"diamond\"],[2,\"diamond\"],[3,\"diamond\"],[4,\"diamond\"],[5,\"diamond\"],[6,\"diamond\"],[7,\"diamond\"],[8,\"diamond\"],[9,\"diamond\"],[10,\"diamond\"],[\"J\",\"diamond\"],[\"Q\",\"diamond\"],[\"K\",\"diamond\"],[\"A\",\"heart\"],[2,\"heart\"],[3,\"heart\"],[4,\"heart\"],[5,\"heart\"],[6,\"heart\"],[7,\"heart\"],[8,\"heart\"],[9,\"heart\"],[10,\"heart\"],[\"J\",\"heart\"],[\"Q\",\"heart\"],[\"K\",\"heart\"],[\"A\",\"clover\"],[2,\"clover\"],[3,\"clover\"],[4,\"clover\"],[5,\"clover\"],[6,\"clover\"],[7,\"clover\"],[8,\"clover\"],[9,\"clover\"],[10,\"clover\"],[\"J\",\"clover\"],[\"Q\",\"clover\"],[\"K\",\"clover\"]];\r\n        for(let i = shuffling.length - 1; i > 0; i--){\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [shuffling[i], shuffling[j]] = [shuffling[j], shuffling[i]];\r\n        }\r\n        setDeck(shuffling);\r\n        return shuffling;\r\n    }\r\n\r\n    const playerDraw = (deck) => {\r\n        console.log(\"playerDraw\");\r\n        let tmp = [...deck];\r\n        let draw = tmp.shift();\r\n        console.log(draw);\r\n        setPhand((prev)=>[...prev,draw]);\r\n        setDeck(tmp);\r\n        setInform(\"PLAYER, \" + draw[0] + \" \" + draw[1]);\r\n        return tmp;\r\n    }\r\n\r\n    const dealerDraw = (deck) => {\r\n        console.log(\"dealerDraw\");\r\n        let tmp = [...deck];\r\n        let draw = tmp.shift();\r\n        console.log(draw);\r\n        setDhand((prev)=>[...prev,draw]);\r\n        setDeck(tmp);\r\n        setInform(\"DEALER, \" + draw[0] + \" \" + draw[1]);\r\n        return tmp;\r\n    }\r\n\r\n    const DrawPhase = async() => {\r\n        console.log(\"DrawPhase\");\r\n        let deck = [...Deck];\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = playerDraw(deck);\r\n        await wait(1);\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = dealerDraw(deck);\r\n        await wait(1);\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = playerDraw(deck);\r\n        await wait(1);\r\n        setController(\"ActionPhase\");\r\n    }\r\n\r\n    const ActionPhase = () => {\r\n        console.log(\"ActionPhase\");\r\n        setPhase(11);\r\n        if(Pscore.includes(21)){\r\n            setController(\"DealerOpen\");\r\n        }else if(!Pscore.some((e)=> e < 21)){\r\n            setController(\"PlayerBust\");\r\n        }else{\r\n            setInform(\"CHOOSE THE ACTION.\");\r\n            setPhase(1);\r\n        }\r\n    }\r\n\r\n    const HIT = async() => {\r\n        console.log(\"HIT\");\r\n        setPhase(11);\r\n        setInform(\"HIT, playerDraw\");\r\n        await wait(1);\r\n        let deck = [...Deck];\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = playerDraw(deck);\r\n        await wait(1);\r\n        setController(\"PlayerCheck\");\r\n    }\r\n\r\n    const playerCheck = () => {\r\n        console.log(\"PlayerCheck\");\r\n        if(Pscore.includes(21)){\r\n            setController(\"DealerOpen\");\r\n        }else if(!Pscore.some((e)=> e < 21)){\r\n            setController(\"PlayerBust\");\r\n        }else{\r\n            setInform(\"액션을 선택하세요.\");\r\n            setPhase(1);\r\n            setController(\"\");\r\n        }\r\n    }\r\n\r\n    const STAND = () => {\r\n        console.log(\"STAND\");\r\n        setController(\"DealerOpen\");\r\n    }\r\n\r\n    const DealerOpen = async() => {\r\n        console.log(\"DealerOpen\");\r\n        setPhase(11);\r\n        setInform(\"STAND, DEALER OPEN.\");\r\n        await wait(0.5);\r\n        setInform(\"STAND, DEALER OPEN..\");\r\n        await wait(0.5);\r\n        setInform(\"STAND, DEALER OPEN...\");\r\n        await wait(0.5);\r\n        setPhase(4);\r\n        let deck = [...Deck];\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = dealerDraw(deck);\r\n        setController(\"DealerCheck\");\r\n    }\r\n\r\n    const DealerCheck = async() => {\r\n        console.log(\"DealerCheck\");\r\n        if(Dscore.every((e) => e > 21)){\r\n            await wait(1);\r\n            if(Pscore.includes(21)){\r\n                setController(\"PlayerBJ\");\r\n            }else{\r\n                setController(\"DealerBust\");\r\n            }\r\n        }else if(!Dscore.some((e)=> e >= 17 && e <= 21)){\r\n            console.log(\"<17, Redraw.\");\r\n            setController(\"\");\r\n            await wait(1);\r\n            let deck = [...Deck];\r\n            if(!deck.length){\r\n                deck = cardShuffle();\r\n                await wait(1);\r\n            }\r\n            deck = dealerDraw(deck);\r\n            setController(\"DealerCheck\");\r\n        }else{\r\n            await wait(1);\r\n            setController(\"WhoWin\");\r\n        }\r\n    }\r\n\r\n    const whoWin = () => {\r\n        console.log(\"WhoWin\");\r\n        if(Dscore.includes(21)){\r\n            setController(\"DealerBJ\");\r\n        }else if(Pscore.includes(21)){\r\n            setController(\"PlayerBJ\");\r\n        }else{\r\n            let P = Math.max(...Pscore.filter((x)=>x<21));\r\n            let D = Math.max(...Dscore.filter((x)=>x<21));\r\n            if(P > D){\r\n                setController(\"PlayerWin\");\r\n            }else{\r\n                setController(\"DealerWin\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const playerBust = async() => {\r\n        console.log(\"playerBust\");\r\n        let deck = [...Deck];\r\n        if(!deck.length){\r\n            deck = cardShuffle();\r\n            await wait(1);\r\n        }\r\n        deck = dealerDraw(deck);\r\n        setInform(\"PLAYER BUST.\");\r\n        setPhase(5);\r\n        setBet(0);\r\n        setController(\"\");\r\n        if(money < 10)setGameOver(true);\r\n    }\r\n\r\n    const dealerBust = () => {\r\n        console.log(\"dealerBust\");\r\n        let earning = bet * 2;\r\n        setInform(\"DEALER BUST. +\" + earning + \" G.\");\r\n        setMoney(money + earning);\r\n        setBet(0);\r\n        setPhase(6);\r\n        setController(\"\");\r\n    }\r\n\r\n    const playerWin = () => {\r\n        console.log(\"playerWin\");\r\n        let earning = bet * 2;\r\n        setInform(\"PLAYER WIN. +\" + earning + \" G.\");\r\n        setMoney(money + earning);\r\n        setBet(0);\r\n        setPhase(7);\r\n        setController(\"\");\r\n    }\r\n\r\n    const dealerWin = () => {\r\n        console.log(\"dealerWin\");\r\n        setInform(\"DEALER WIN.\");\r\n        setBet(0);  \r\n        setPhase(8);\r\n        setController(\"\");\r\n        if(money < 10)setGameOver(true);\r\n    }\r\n\r\n    const playerBJ = () => {\r\n        console.log(\"palyerBJ\");\r\n        let earning = bet * 2.5;\r\n        setInform(\"PLAYER BLACKJACK. +\" + earning + \" G.\");\r\n        setMoney(money + earning);\r\n        setBet(0);  \r\n        setPhase(9);\r\n        setController(\"\");\r\n    }\r\n\r\n    const dealerBJ = () => {\r\n        console.log(\"dealerBJ\");\r\n        setInform(\"DEALER BLACK JACK.\");\r\n        setBet(0);\r\n        setPhase(10);\r\n        setController(\"\");\r\n        if(money < 10)setGameOver(true);\r\n    }\r\n\r\n    const [controller, setController] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        if(controller === \"DrawPhase\"){\r\n            DrawPhase();\r\n        }else if(controller === \"ActionPhase\"){\r\n            ActionPhase();\r\n        }else if(controller === \"PlayerCheck\"){\r\n            playerCheck();\r\n        }else if(controller === \"DealerOpen\"){\r\n            DealerOpen();\r\n        }else if(controller === \"DealerCheck\"){\r\n            DealerCheck();\r\n        }else if(controller === \"PlayerBust\"){\r\n            playerBust();\r\n        }else if(controller === \"DealerBust\"){\r\n            dealerBust();\r\n        }else if(controller === \"PlayerWin\"){\r\n            playerWin();\r\n        }else if(controller === \"DealerWin\"){\r\n            dealerWin();\r\n        }else if(controller === \"PlayerBJ\"){\r\n            playerBJ();\r\n        }else if(controller === \"DealerBJ\"){\r\n            dealerBJ();\r\n        }else if(controller === \"WhoWin\"){\r\n            whoWin();\r\n        }\r\n    },[controller]);\r\n\r\n    const calculateHand = (hand) => {\r\n        let tmp = [0];\r\n        if(hand.length !== 0){\r\n            for(let i = 0; i < hand.length; i++){\r\n                if(hand[i][0] === 'A'){\r\n                    for(let j = 0; j < tmp.length; j++) tmp[j]+=1;\r\n                    tmp.push(tmp[tmp.length - 1] + 10);\r\n                }else if(hand[i][0] === 'J' || hand[i][0] === 'Q' || hand[i][0] === 'K'){\r\n                    for(let j = 0; j < tmp.length; j++) tmp[j]+=10;\r\n                }else{\r\n                    for(let j = 0; j < tmp.length; j++) tmp[j]+=hand[i][0];\r\n                }\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDscore(calculateHand(Dhand));\r\n        setPscore(calculateHand(Phand));\r\n    },[Phand, Dhand, setDscore, setPscore]);\r\n\r\n    const betAdd = (value) => {\r\n        if(betting <= money - value) setBetting(betting + value);\r\n    }\r\n    const betAI = () => {\r\n        setBetting(money);\r\n    }\r\n\r\n    const betRE = () => {\r\n        setBetting(10);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"chooseBar\">\r\n                {phase === 0 || (phase > 4 && phase < 11)?\r\n                    <div className=\"betPhase\">\r\n                        <div className=\"betAdjustBox\">\r\n                            <div className=\"betAdjustBoxLine\">\r\n                                <div className=\"betAdjust\" onClick={()=>{betAdd(10)}}>+10</div>\r\n                                <div className=\"betAdjust\" onClick={()=>{betAdd(10000)}}>+10K</div>\r\n                            </div>\r\n                            <div className=\"betAdjustBoxLine\">\r\n                                <div className=\"betAdjust\" onClick={()=>{betAdd(100)}}>+100</div>\r\n                                <div className=\"betAdjust\" onClick={betAI}>ALLIN</div>\r\n                            </div>\r\n                            <div className=\"betAdjustBoxLine\">\r\n                                <div className=\"betAdjust\" onClick={()=>{betAdd(1000)}}>+1K</div>\r\n                                <div className=\"betAdjust\" onClick={betRE}>RESET</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"betting\">\r\n                            <div>{betting}</div>\r\n                            <div>　G</div>\r\n                        </div>\r\n                        <div className=\"button\" onClick={BET}>BET</div>\r\n                    </div>\r\n                    :\r\n                    phase === 1 ?\r\n                    (\r\n                    <div className=\"openedPhase\">\r\n                        <div className=\"button\" onClick={HIT}>HIT</div>\r\n                        <div className=\"button\" onClick={STAND}>STAND</div>\r\n                    </div>\r\n                    )\r\n                    :\r\n                    \"\"\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Choose;",[],"D:\\Projects\\blackjack\\src\\components\\Status\\index.js",[],[],"D:\\Projects\\blackjack\\src\\components\\GameOver\\index.js",[],[],"D:\\Projects\\blackjack\\src\\components\\Table\\index.js",[],[],"D:\\Projects\\blackjack\\src\\components\\Inform\\index.js",[],[],"D:\\Projects\\blackjack\\src\\Atom.js",[],[],"D:\\Projects\\blackjack\\src\\components\\Title\\index.js",[],[],{"ruleId":"56","severity":1,"message":"57","line":292,"column":7,"nodeType":"58","endLine":292,"endColumn":19,"suggestions":"59"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ActionPhase', 'DealerCheck', 'DealerOpen', 'DrawPhase', 'dealerBJ', 'dealerBust', 'dealerWin', 'playerBJ', 'playerBust', 'playerCheck', 'playerWin', and 'whoWin'. Either include them or remove the dependency array.","ArrayExpression",["60"],{"desc":"61","fix":"62"},"Update the dependencies array to be: [ActionPhase, DealerCheck, DealerOpen, DrawPhase, controller, dealerBJ, dealerBust, dealerWin, playerBJ, playerBust, playerCheck, playerWin, whoWin]",{"range":"63","text":"64"},[9434,9446],"[ActionPhase, DealerCheck, DealerOpen, DrawPhase, controller, dealerBJ, dealerBust, dealerWin, playerBJ, playerBust, playerCheck, playerWin, whoWin]"]